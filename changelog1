CS153 Lab 1
Authors: Annie Chiou, Ethan Valdez

Log 4/18

TODO: Update exit()
1. Get familiar with exit() syscall flow
2. Add exit status field to process structure in proc.h
3. Change exit system call signature to void exit(int status)
4. Add code in exit() function to update the exit status of the process
    a) Other than this, no other changes should be necessary
5. Update all system calls utilizing exit() to match the new prototype
    a) See files: user.h, defs.h, sysproc.c, proc.c
    b) Note: usertests.c is almost 2000 lines long and has lots of exit() and 
    wait() syscalls; TA told us that we can just remove it from the Makefile 
    and not modify it to make our lives easier.

DONE:
1. (attempted to) Get familiar with exit() syscall flow

TODO: Update wait()
1. Get familiar with wait() syscall flow
2. Update wait system call signature to int wait(int* status)
3. Add code in wait() to return terminated child's exit status through status
   argument
    a) The return value of the call should be the PID of the terminated child
    or -1 if no child exists/unexpected error occurred
    b) Note that wait system call can receive NULL as an argument. In this case 
    the child's exit status must be discarded

DONE:
< Nothing yet >

TODO: Add waitpid() syscall
1. Understand how the wait() syscall blocks the parent process
2. Update the rest of this TODO.

DONE:
< Nothing yet >

TODO: Scheduler
1. Look over the scheduler code and understand how it works
2. Add a priority value to each process (requires updating the PCB in proc.h)
3. Add a system call to change the priority of a process
4. Update the rest of this TODO.

DONE:
< Nothing yet >
